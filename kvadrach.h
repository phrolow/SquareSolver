//! @brief  Решение квадратного уравнения

#ifndef KVADRACH
#define KVADRACH
//#define DEBUG

#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <TXLib.h>

enum Roots
{   NO_ROOT = 0,
    ONE_ROOT = 1,
    TWO_ROOTS = 2,
    ALL_ROOTS = 3 };

const double EPSILON = 0.0001;
const int MAXLINE = 1000;

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Взятие коэффициента
//!
//! @param   k       Вводимый коэффициент
//!
//! @return  Считывает и возвращает коэффициент. При неправильном вводе пытается считать снова
//!
//! @usage @code
//!          double a = get('a');         // Считывает коэффициент a
//! @endcode
//}----------------------------------------------------------------------------------------------------------------

double get(char k);

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Сравнение
//!
//! @param   a       Первое число
//! @param   b       Второе число
//!
//! @return  Возвращает 1, если модуль разности чисел мал или они оба NAN, иначе 0
//!
//! @usage @code
//!          compare(NAN, NAN);           // Возвращает 1
//!          compare(0.0, 0.0);           // Возвращает 1
//!          compare(1, 0);               // Возвращает 0
//! @endcode
//}----------------------------------------------------------------------------------------------------------------

int compare(double a, double b);

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Решение линейного уравнения
//!
//! @param[in]   a       Коэффициент a
//! @param[in]   b       Коэффициент b
//! @param[out]  x1      Корень
//!
//! @warning Если корня нет, возвращает NAN
//!
//! @return  Возвращает число корней. Если корней бесконечное число, возвращает 3
//!
//! @usage @code
//!          nRoots = linecase(0, 0, &x1);     // nRoots равно 3, x1 - NAN
//! @endcode
//}----------------------------------------------------------------------------------------------------------------

int linecase(double a, double b, double *x1);

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Решение квадратного уравнения
//!
//! @param[in]   a       Коэффициент a
//! @param[in]   b       Коэффициент b
//! @param[in]   c       Коэффициент c
//! @param[out]  x1      Меньший корень
//! @param[out]  x2      Больший корень
//!
//! @warning a не должно быть 0
//!
//! @warning Если корней нет, x1 и x2 равны NAN. Если корень один, его значение записывается в x1, а в x2 записывается NAN
//!
//! @return  Возвращает число корней
//!
//! @usage @code
//!          nRoots = sqrcase(0, 0, 5, &x1, &x2);     // nRoots равно 0, x1 и x2 - NAN
//! @endcode
//}----------------------------------------------------------------------------------------------------------------

int sqrcase(double a, double b, double c, double *x1, double *x2);

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Фикс нуля
//!
//! @param   a       Указатель на число
//!
//! @warning a не должно быть NAN
//!
//! @return  Если a равно -0, делает его нулевым
//!
//! @usage @code
//!          double a = -0;
//!          fixzero(&a);
//! @endcode
//}----------------------------------------------------------------------------------------------------------------

void fixzero(double *a);

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Решение уравнения 2 степени
//!
//! @param[in]   a       Коэффициент a
//! @param[in]   b       Коэффициент b
//! @param[in]   c       Коэффициент c
//! @param[out]  nRoot   Число корней
//! @param[out]  x1      Меньший корень
//! @param[out]  x2      Больший корень
//!
//! @warning a не должно быть 0
//!
//! @warning Если корней нет либо бесконечно, x1 и x2 равны NAN. Если корень один, его значение записывается в x1, а в x2 записывается NAN
//!
//! @usage @code
//!          solve(1, 2, 1, &nRoot, &x1, &x2);   // nRoot равно ONE_ROOT, x1 равен -1, x2 равен NAN
//! @endcode
//}----------------------------------------------------------------------------------------------------------------

void solve(double a, double b, double c, enum Roots *nRoot, double *x1, double *x2);

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Запуск тестирования
//!
//! @param   path       Имя файла с тестами
//}----------------------------------------------------------------------------------------------------------------

void test(char *path);

//{----------------------------------------------------------------------------------------------------------------
//! @brief   Тест
//!
//! @param   a              Коэффициент a
//! @param   b              Коэффициент b
//! @param   c              Коэффициент c
//! @param   testnRoots     Число корней, которое должно быть при введённых параметрах; 3, если решениями должны быть все числа
//! @param   testx1         Меньший корень при введённых параметрах
//! @param   testx2         Больший корень при введённых параметрах
//!
//! @return  Возвращает 0 при провале теста, 1 в противном случае
//!
//! @usage @code
//!          singletest(0, 0, 0, 3, NAN, NAN)         // Возвращает 1
//!          singletest(0, 0, 0, 1, 0, 0);            // Возвращает 0
//! @endcode
//}----------------------------------------------------------------------------------------------------------------

int singletest(double a, double b, double c, int testnRoots, double testx1, double testx2);

#endif
